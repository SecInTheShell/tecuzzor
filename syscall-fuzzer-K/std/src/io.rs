use core;

use os::kernel;
use os::raw;

/// Empty structure that uses libcore's `fmt::Write` trait to provide support for writing formatted
/// Arguments lists (as generated by the built-in `format_args!()` macro`)
pub struct KernelDebugWriter {}
impl core::fmt::Write for KernelDebugWriter {
    fn write_str(&mut self, message: &str) -> core::fmt::Result {
        unsafe {
            let ptr =
                kernel::__kmalloc((message.len() + 1) as raw::c_size_t, 0x90) as *mut raw::c_char; // 0x90 = GFP_KERNEL
            if ptr.is_null() {
                let msg = c_str!("Failed to allocate memory for dynamic printk()\n");
                let ptr = msg.as_ptr() as *const raw::c_char;
                kernel::printk(ptr);
            } else {
                core::ptr::copy(message.as_ptr(), ptr as *mut u8, message.len());
                core::ptr::write(ptr.offset(message.len() as isize), 0);
                kernel::printk(ptr);
                kernel::kfree(ptr as *const raw::c_void);
            }
        }

        core::result::Result::Ok(())
    }
}
